type Query {
    # Account
    accountByEmail( email: String! ): Account
    allAccounts: [Account!]!
    accountById( id: ID! ): Account
    accountsByRole(role: Roles): [Account!]!
    accountsByCountry(country: String!): [Account!]!
    accountExists(email: String!): Account
    accountByProfileId(profileId: String!): Account
    # State
    allStates: [State!]!
    # Role
    roleById(id: ID!): Role
    allRoles: [Role!]!
}

type Mutation {
    registerAccount(email: String!, password: String!, profileId: ID): AuthPayload
    login(email: String!, password: String!, rememberMe: Boolean!): AuthPayload
    refresh(email: String!, refreshToken: String!): AuthPayload
    createAccountConnect(email: String!, password: String!, state: State!, country: String, roles: [ID!], profileId: ID!): Account
    createAccountCreate(email: String!, password: String!, state: State!, country: String, roles: [ID!]!, profileId: ID!): Account
    updateAccountCreate(email: String, password: String, rememberMe: Boolean, state: State, country: String, roleId: ID): Account
    removeAccount(id: ID, email: String): Account
    attachProfileToAccount(accountId: ID!, profileId: ID!): Account
    createRole(role: Roles!, desc: String!): Role
    updateState(accountId: ID!, state: State!): Account
    flagAccount(accountId: ID!): Account
    banAccount(accountId: ID!): Account
}

type Account {
  id: ID!
  email: String!
  password: String!
  rememberMe: Boolean!
  accountState: State
  country: String
  roles: [Role!]!
  profileID: ID
}

type Role {
  id: ID!
  role: Roles
  desc: String
}


type AuthPayload {
  token: String
  refreshToken: String
  account: Account
}

enum State {
  ACTIVE 
  INACTIVE
  DISABLED
  FLAGGED
  BANNED
}

enum Roles {
  REGULAR
  PREMIUM
  ADMIN
}